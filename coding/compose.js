/**
 * @file compose
 * compose 函数可以接收多个独立的函数作为参数，然后将这些函数进行组合串联，最终返回一个“组合函数”;
 * “组合函数”执行时，其内部的所有函数都会按照组合时的顺序并以队列的形式有序的执行，
 * 前一个函数的返回值会作为下一个函数的参数被接收，因此“组合函数”中的第一个执行的函数可以接收多个参数，
 * 而之后的函数只能接收一个参数（上一个函数的返回值）
 * compose 函数的特点:
        参数是多个函数，返回值是一个“组合函数”。
        组合函数内的所有的函数从右至左一个一个执行（主要符合数学从右到左的操作概念）。
        组合函数内除了第一个执行函数的参数是多元的，其它函数的参数都是接收上一个函数的返回值。
    
    参考：
        闭包（http://www.wawow.xyz/#/md-render?bid=2）
        compose（https://juejin.cn/post/6844903988647690254）
 */


/**
 * 组合函数
 * @param  {...any} fn 多个函数
 * @returns 返回组合函数
 */
function compose(...fn) {
    // 1、判断“组合”的函数为空，直接输出传入的参数
    if (!fn.length) return (...args) => args;

    // 2、当只“组合”一个函数时，直接返回当前函数；
    if (fn.length === 1) return fn[0];

    // 3、当“组合”了多个函数时，最后一个函数接受所有参数，从右往左，右侧函数的输出值为左侧函数的参数；
    return fn.reduce(
        (pre, cur) => {
            // 利用闭包（在一个函数中返回一个函数，伴随闭包的产生）
            (...args) => {
                pre(cur(...args))
            }
        }
    );
}


